#!/usr/bin/env bash
# shellcheck disable=SC2094,SC2210,SC3028,SC2211,SC2171,SC2288
# Shellchecks disabled for this file
# SC2094: Make sure not to read and write the same file in the same pipeline.
# SC2210: This is a file redirection. Was it supposed to be a comparison or fd operation?
# SC3028: In POSIX sh, VARIABLE is undefined.
# SC2211: This is a glob used as a command name. Was it supposed to be in ${..}, array, or is it missing quoting?
# SC2171: Found trailing ] outside test. Add missing [ or quote if intentional.
# SC2288: This is interpreted as a command name ending with apostrophe. Double check syntax.

# This will fail until you run the post_yabai_installation script
.load "sip_skhdrc"

############################# Mode definitions ##################################
:: default           : ~/.config/skhd/mode_controller.sh default # default mode: normal
:: stack   @         : ~/.config/skhd/mode_controller.sh stack # stack mode: interact with stacks
:: display @         : ~/.config/skhd/mode_controller.sh display # display mode: focus displays, move windows to other displays
:: window  @         : ~/.config/skhd/mode_controller.sh window # window mode: manipulate windows and spaces
:: resize  @         : ~/.config/skhd/mode_controller.sh resize # resize mode: resize windows in current space
:: inst    @         : ~/.config/skhd/mode_controller.sh inst # insert mode: tell yabai where to insert the new window
:: reload  @         : ~/.config/skhd/mode_controller.sh reload # reload mode: restart services

# Hack to use "ctrl + shift - r" keybinding in RubyMine
# to run tests but trigger resize mode everywhere else
# meh is (shift + alt + ctrl)
default < ctrl + shift - r [
  "rubymine"   ~
  "code"   ~
  * : skhd -k "meh - r"
]

resize < ctrl + shift - r [
  "rubymine"   ~
  "code"   ~
  * : skhd -k "meh - r"
]

# Activate modes using the keybinding
default < ctrl + shift - d ; display
default < ctrl + shift - s ; stack
default < ctrl + shift - w ; window
default < meh - r          ; resize
default < ctrl + shift - i ; inst
default < ctrl + shift - x ; reload

# De-activate modes
display, window, resize, stack, inst, reload < escape ; default

display < ctrl + shift - d ; default
stack   < ctrl + shift - s ; default
window  < ctrl + shift - w ; default
resize  < meh - r          ; default
inst    < ctrl + shift - i ; default
reload  < ctrl + shift - x ; default

# Launch other modes from within a mode
# display, stack, window, resize, inst, reload
stack, window, resize, inst, reload    < d ; display
display, window, resize, inst, reload  < s ; stack
display, stack, resize, inst, reload   < w ; window
display, stack, window, inst, reload   < r ; resize
display, stack, window, resize, reload < i ; inst

############################# Global modifiers ##################################
# The aim is to not have too many global key-bindings because it will clash with
# other application based keybindings e.g. VS Code, IntelliJ, etc.

# toggle fullscreen inside screen
ctrl + shift - space  : yabai -m window --toggle zoom-fullscreen; \
                        sketchybar --trigger window_focus

ctrl + shift - right  : yabai -m window --focus east || \
                        yabai -m window --focus west; \
                        sketchybar --trigger window_focus
ctrl + shift - left   : yabai -m window --focus west || \
                        yabai -m window --focus east; \
                        sketchybar --trigger window_focus
ctrl + shift - up     : yabai -m window --focus north || \
                        yabai -m window --focus stack.prev || \
                        yabai -m window --focus stack.last; \
                        sketchybar --trigger window_focus

ctrl + shift - down   : yabai -m window --focus south || \
                        yabai -m window --focus stack.next || \
                        yabai -m window --focus stack.first; \
                        sketchybar --trigger window_focus

ctrl - down           : yabai -m window --focus mouse; \
                        sketchybar --trigger window_focus

# vi like key bindings
ctrl + shift - l      : skhd -k "ctrl + shift - right"
ctrl + shift - h      : skhd -k "ctrl + shift - left"
ctrl + shift - k      : skhd -k "ctrl + shift - up"
ctrl + shift - j      : skhd -k "ctrl + shift - down"

# toggle window native fullscreen
ctrl + shift - f      : yabai -m window --toggle native-fullscreen

# Fast focus display
ctrl + alt - left      : yabai -m display --focus west || yabai -m display --focus recent
ctrl + alt - right     : yabai -m display --focus east || yabai -m display --focus recent
ctrl + alt - up        : yabai -m display --focus north || yabai -m display --focus recent
ctrl + alt - down      : yabai -m display --focus south || yabai -m display --focus recent

# float / unfloat window and center on screen
alt - f                : yabai -m window --toggle float; \
                         yabai -m window --grid 4:4:1:1:2:2; \
                         sketchybar --trigger window_focus

# Restart all services
ctrl + alt + cmd - r : yabai --restart-service; \
                       launchctl kickstart -k "gui/${UID}/homebrew.mxcl.sketchybar"; \
                       skhd --restart-service

# Open Terminal
ctrl + shift - 0x24  : open -na /Applications/Alacritty.app

# Open Finder
ctrl + shift - k     : open -na /Applications/Forklift.app

# Close a window. Not the same as quit
ctrl + shift - q     : yabai -m window --close

# Focus window under mouse
cmd - m              : yabai -m window --focus mouse

# Toggle zen mode. zooms focused window, removes all margins
# and hides status bar
ctrl + shift - z      : ~/.config/skhd/toggle_zen_mode.sh; \
                        skhd -k 'escape'


######################## Insert mode ###########################################

inst < left            : yabai -m window --insert west; skhd -k 'escape'
inst < down            : yabai -m window --insert south; skhd -k 'escape'
inst < up              : yabai -m window --insert north; skhd -k 'escape'
inst < right           : yabai -m window --insert east; skhd -k 'escape'
inst < s               : yabai -m window --insert stack; skhd -k 'escape'

######################## Stack mode ############################################

# Add the active window  to the window or stack to the {direction}
# Note that this only works when the active window does *not* already belong to a stack
stack < left           : yabai -m window west  \
                         --stack "$(yabai -m query --windows --window | jq -r '.id')"; \
                         skhd -k 'escape'

stack < down           : yabai -m window south \
                         --stack "$(yabai -m query --windows --window | jq -r '.id')" ; \
                         skhd -k 'escape'

stack < up             : yabai -m window north \
                         --stack "$(yabai -m query --windows --window | jq -r '.id')" ; \
                         skhd -k 'escape'

stack < right          : yabai -m window east  \
                         --stack "$(yabai -m query --windows --window | jq -r '.id')"; \
                         skhd -k 'escape'

# Toggle current space layout between stack and bsp
stack < space          : yabai -m query --spaces --space | \
                         jq -re ".type" | \
                         xargs -I {} bash -c \
                         "if [ {} = 'stack' ]; \
                         then yabai -m space --layout bsp; \
                         else yabai -m space --layout stack; \
                         fi"; \
                         skhd -k 'escape'

# Remove the current window from the stack. Only works if the space layout is bsp
stack < b              : window="$(yabai -m query --windows --window | jq -r '.id')"; \
                         yabai -m window east --stack $window || \
                         (yabai -m window $window --toggle float && yabai -m window $window --toggle float); \
                         skhd -k 'escape'

# Stack all windows in the currect space on top of the current window while keeping the current space layout in bsp
stack < s              : window="$(yabai -m query --windows --window | jq -r '.id')" && \
                         yabai -m query --windows --space | jq -rc --arg w "$window" '[.[].id] | map(select(. != $w)) | .[]' | \
                         xargs -I {} yabai -m window "$window" --stack {}; \
                         skhd -k 'escape'

####################### Resize mode ############################################

# Resize focused window towards left direction
resize < h             : yabai -m window --resize left:-100:0 || \
                         yabai -m window --resize right:-100:0

# Resize focused window towards down direction
resize < j             : yabai -m window --resize bottom:0:100 || \
                         yabai -m window --resize top:0:100

# Resize focused window towards up direction
resize < k             : yabai -m window --resize top:0:-100 || \
                         yabai -m window --resize bottom:0:-100

# Resize focused window towards right direction
resize < l             : yabai -m window --resize right:100:0 || \
                         yabai -m window --resize left:100:0

resize < left          : skhd -k "h"

# Resize focused window towards down direction
resize < down          : skhd -k "j"

# Resize focused window towards up direction
resize < up            : skhd -k "k"

# Resize focused window towards right direction
resize < right         : skhd -k "l"

# Balance all windows. Maps to `=` key
resize < 0x18          : yabai -m space --balance; skhd -k 'escape'

# Rotate tree by 90 degrees
resize < r             : yabai -m space --rotate 90

# Mirror tree y-axis
resize < y             : yabai -m space --mirror y-axis; \
                         skhd -k 'escape'

# Mirror tree x-axis
resize < x             : yabai -m space --mirror x-axis; \
                         skhd -k 'escape'

# Set all windows on active space back to normal
resize < z             : yabai -m query --windows --space | \
                         jq -re '.[] | select(."has-fullscreen-zoom" == true) | .id' | \
                         xargs -I{} yabai -m window {} --toggle zoom-fullscreen; \
                         skhd -k 'escape'; \
                         sketchybar --trigger window_focus

# Swaps the recent window with the window that's currently focused by the mouse
resize < s              : yabai -m window mouse --swap recent; \
                          skhd -k 'escape'


############################ Display mode ######################################

# Focus previous display , (Like <)
display < 0x2F         : yabai -m display --focus prev || \
                         yabai -m display --focus next; \
                         sketchybar --trigger windows_on_spaces; \
                         skhd -k 'escape'

# Focus next display . (Like >)
display < 0x2B         : yabai -m display --focus next || \
                         yabai -m display --focus prev; \
                         sketchybar --trigger windows_on_spaces; \
                         skhd -k 'escape'

# Send window to north/up display and follow focus
display < up           : yabai -m window --display north; \
                         yabai -m display --focus north; \
                         sketchybar --trigger windows_on_spaces; \
                         skhd -k 'escape'

# Send window to down/south display and follow focus
display < down         : yabai -m window --display south; \
                         yabai -m display --focus south; \
                         sketchybar --trigger windows_on_spaces; \
                         skhd -k 'escape'

# Send window to right/east display and follow focus
display < right        : yabai -m window --display east; \
                         yabai -m display --focus east; \
                         sketchybar --trigger windows_on_spaces; \
                         skhd -k 'escape'

# Send window to left/west display and follow focus
display < left         : yabai -m window --display west; \
                         yabai -m display --focus west; \
                         sketchybar --trigger windows_on_spaces; \
                         skhd -k 'escape'

# Focus display by number
display < 1           : yabai -m display --focus 1; skhd -k 'escape'
display < 2           : yabai -m display --focus 2; skhd -k 'escape'
display < 3           : yabai -m display --focus 3; skhd -k 'escape'
display < 4           : yabai -m display --focus 4; skhd -k 'escape'

##################### Window mode ##############################################

# create desktop, send window to new desktop and follow focus
window < s            : yabai -m space --create; \
                        index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')"; \
                        yabai -m window --space "${index}"; \
                        yabai -m space --focus "${index}"; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'

# destroy current desktop and follow focus to previous desktop
window < x            : index="$(yabai -m query --spaces --space | jq '.index - 1')"; \
                        yabai -m space --destroy; \
                        yabai -m space --focus "${index}"; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'

# toggle window native fullscreen
window < f            : yabai -m window --toggle native-fullscreen; skhd -k 'escape'

# send current window to i-th space and follow focus* (* requires SIP disabled)
window < left         : yabai -m window --space prev; \
                        yabai -m space --focus prev; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < right        : yabai -m window --space next; \
                        yabai -m space --focus next; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'

# change position of window on the current space
window < h            : yabai -m window --warp west; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < j            : yabai -m window --warp south; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < k            : yabai -m window --warp north; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < l            : yabai -m window --warp east; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'

# send window to specified space
window < 1            : yabai -m window --space 1; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < 2            : yabai -m window --space 2; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < 3            : yabai -m window --space 3; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < 4            : yabai -m window --space 4; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < 5            : yabai -m window --space 5; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < 6            : yabai -m window --space 6; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < 7            : yabai -m window --space 7; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < 8            : yabai -m window --space 8; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < 9            : yabai -m window --space 9; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < 0            : yabai -m window --space 10; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'

window < alt - 1      : yabai -m window --space 11; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < alt - 2      : yabai -m window --space 12; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'
window < alt - 3      : yabai -m window --space 13; \
                        sketchybar --trigger windows_on_spaces; \
                        skhd -k 'escape'

# Switch layout of current desktop between bsp and stack
window < space        : yabai -m query --spaces --space | \
                        jq -re ".type" | \
                        xargs -I {} bash -c \
                        "if [ {} = 'stack' ]; \
                        then yabai -m space --layout bsp; \
                        else yabai -m space --layout stack; \
                        fi"; \
                        skhd -k 'escape'

##################### Reload mode ##############################################

reload < 0            : skhd -k 'escape'; \
                        yabai --restart-service; \
                        launchctl kickstart -k "gui/${UID}/homebrew.mxcl.sketchybar"; \
                        skhd --restart-service

reload < 1            : yabai --restart-service; \
                        skhd -k 'escape'

reload < 2            : skhd -k 'escape'; \
                        skhd --restart-service

reload < 3            : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.sketchybar"; \
                        skhd -k 'escape'
