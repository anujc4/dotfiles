# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: xterm-256color

window:
  dimensions:
    columns: 0
    lines: 0

  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 5
    y: 0

  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  decorations: full

  startup_mode: Windowed

  # Window title
  #title: Alacritty
  # Window class (Linux only):
  class: Alacritty

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  # Normal (roman) font face
  normal:
    family: Hack Nerd Font
    style: Regular

  # Bold font face
  bold:
    family: Hack Nerd Font
    style: Bold

  # Italic font face
  italic:
    family: Hack Nerd Font
    style: Italic

  # Point size
  size: 12.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  use_thin_strokes: false

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

# Colors (Base16 Default Dark)
colors:
  # Default colors
  primary:
    background: '#300a24'
    foreground: '#eeeeec'

  # Normal colors
  normal:
    black: '#2e3436'
    red: '#cc0000'
    green: '#4e9a06'
    yellow: '#c4a000'
    blue: '#3465a4'
    magenta: '#75507b'
    cyan: '#06989a'
    white: '#d3d7cf'

  # Bright colors
  bright:
    black: '#555753'
    red: '#ef2929'
    green: '#8ae234'
    yellow: '#fce94f'
    blue: '#729fcf'
    magenta: '#ad7fa8'
    cyan: '#34e2e2'
    white: '#eeeeec'

background_opacity: 1.0

# Mouse bindings
#
# Available fields:
#   - mouse
#   - action
#   - mods (optional)
#
# Values for `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux) xdg-open
    #   - (Windows) explorer
    launcher:
      program: xdg-open
    #  args: []
    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    modifiers: None

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

cursor:
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux) user login shell
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login
# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None

# Windows 10 ConPTY backend (Windows only)
#
# This will enable better color support and may resolve other issues,
# however this API and its implementation is still young and so is
# disabled by default, as stability may not be as good as the winpty
# backend.
#
# Alacritty will fall back to the WinPTY automatically if the ConPTY
# backend cannot be initialized.
enable_experimental_conpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
key_bindings:
  # (Windows/Linux only)
  - { key: V, mods: Control|Shift, action: Paste }
  - { key: C, mods: Control|Shift, action: Copy }
  #- { key: Insert,   mods: Shift,         action: PasteSelection   }
  - { key: Key0, mods: Control, action: ResetFontSize }
  - { key: Equals, mods: Control, action: IncreaseFontSize }
  - { key: Add, mods: Control, action: IncreaseFontSize }
  - { key: Subtract, mods: Control, action: DecreaseFontSize }
  - { key: Minus, mods: Control, action: DecreaseFontSize }

  - { key: Paste, action: Paste }
  - { key: Copy, action: Copy }
  - { key: L, mods: Control, action: ClearLogNotice }
  - { key: L, mods: Control, chars: "\f" }
  - { key: Home, mods: Alt, chars: "\e[1;3H" }
  - { key: Home, chars: "\eOH", mode: AppCursor }
  - { key: Home, chars: "\e[H", mode: ~AppCursor }
  - { key: End, mods: Alt, chars: "\e[1;3F" }
  - { key: End, chars: "\eOF", mode: AppCursor }
  - { key: End, chars: "\e[F", mode: ~AppCursor }
  - {
      key: PageUp,
      mods: Shift,
      action: ScrollPageUp,
      mode: ~Alt
    }
  - { key: PageUp, mods: Shift, chars: "\e[5;2~", mode: Alt }
  - { key: PageUp, mods: Control, chars: "\e[5;5~" }
  - { key: PageUp, mods: Alt, chars: "\e[5;3~" }
  - { key: PageUp, chars: "\e[5~" }
  - {
      key: PageDown,
      mods: Shift,
      action: ScrollPageDown,
      mode: ~Alt
    }
  - {
      key: PageDown,
      mods: Shift,
      chars: "\e[6;2~",
      mode: Alt
    }
  - { key: PageDown, mods: Control, chars: "\e[6;5~" }
  - { key: PageDown, mods: Alt, chars: "\e[6;3~" }
  - { key: PageDown, chars: "\e[6~" }
  - { key: Tab, mods: Shift, chars: "\e[Z" }
  - { key: Back, chars: "" }
  - { key: Back, mods: Alt, chars: "\e" }
  - { key: Insert, chars: "\e[2~" }
  - { key: Delete, chars: "\e[3~" }
  - { key: Left, mods: Shift, chars: "\e[1;2D" }
  - { key: Left, mods: Control, chars: "\e[1;5D" }
  - { key: Left, mods: Alt, chars: "\e[1;3D" }
  - { key: Left, chars: "\e[D", mode: ~AppCursor }
  - { key: Left, chars: "\eOD", mode: AppCursor }
  - { key: Right, mods: Shift, chars: "\e[1;2C" }
  - { key: Right, mods: Control, chars: "\e[1;5C" }
  - { key: Right, mods: Alt, chars: "\e[1;3C" }
  - { key: Right, chars: "\e[C", mode: ~AppCursor }
  - { key: Right, chars: "\eOC", mode: AppCursor }
  - { key: Up, mods: Shift, chars: "\e[1;2A" }
  - { key: Up, mods: Control, chars: "\e[1;5A" }
  - { key: Up, mods: Alt, chars: "\e[1;3A" }
  - { key: Up, chars: "\e[A", mode: ~AppCursor }
  - { key: Up, chars: "\eOA", mode: AppCursor }
  - { key: Down, mods: Shift, chars: "\e[1;2B" }
  - { key: Down, mods: Control, chars: "\e[1;5B" }
  - { key: Down, mods: Alt, chars: "\e[1;3B" }
  - { key: Down, chars: "\e[B", mode: ~AppCursor }
  - { key: Down, chars: "\eOB", mode: AppCursor }
  - { key: F1, chars: "\eOP" }
  - { key: F2, chars: "\eOQ" }
  - { key: F3, chars: "\eOR" }
  - { key: F4, chars: "\eOS" }
  - { key: F5, chars: "\e[15~" }
  - { key: F6, chars: "\e[17~" }
  - { key: F7, chars: "\e[18~" }
  - { key: F8, chars: "\e[19~" }
  - { key: F9, chars: "\e[20~" }
  - { key: F10, chars: "\e[21~" }
  - { key: F11, chars: "\e[23~" }
  - { key: F12, chars: "\e[24~" }
  - { key: F1, mods: Shift, chars: "\e[1;2P" }
  - { key: F2, mods: Shift, chars: "\e[1;2Q" }
  - { key: F3, mods: Shift, chars: "\e[1;2R" }
  - { key: F4, mods: Shift, chars: "\e[1;2S" }
  - { key: F5, mods: Shift, chars: "\e[15;2~" }
  - { key: F6, mods: Shift, chars: "\e[17;2~" }
  - { key: F7, mods: Shift, chars: "\e[18;2~" }
  - { key: F8, mods: Shift, chars: "\e[19;2~" }
  - { key: F9, mods: Shift, chars: "\e[20;2~" }
  - { key: F10, mods: Shift, chars: "\e[21;2~" }
  - { key: F11, mods: Shift, chars: "\e[23;2~" }
  - { key: F12, mods: Shift, chars: "\e[24;2~" }
  - { key: F1, mods: Control, chars: "\e[1;5P" }
  - { key: F2, mods: Control, chars: "\e[1;5Q" }
  - { key: F3, mods: Control, chars: "\e[1;5R" }
  - { key: F4, mods: Control, chars: "\e[1;5S" }
  - { key: F5, mods: Control, chars: "\e[15;5~" }
  - { key: F6, mods: Control, chars: "\e[17;5~" }
  - { key: F7, mods: Control, chars: "\e[18;5~" }
  - { key: F8, mods: Control, chars: "\e[19;5~" }
  - { key: F9, mods: Control, chars: "\e[20;5~" }
  - { key: F10, mods: Control, chars: "\e[21;5~" }
  - { key: F11, mods: Control, chars: "\e[23;5~" }
  - { key: F12, mods: Control, chars: "\e[24;5~" }
  - { key: F1, mods: Alt, chars: "\e[1;6P" }
  - { key: F2, mods: Alt, chars: "\e[1;6Q" }
  - { key: F3, mods: Alt, chars: "\e[1;6R" }
  - { key: F4, mods: Alt, chars: "\e[1;6S" }
  - { key: F5, mods: Alt, chars: "\e[15;6~" }
  - { key: F6, mods: Alt, chars: "\e[17;6~" }
  - { key: F7, mods: Alt, chars: "\e[18;6~" }
  - { key: F8, mods: Alt, chars: "\e[19;6~" }
  - { key: F9, mods: Alt, chars: "\e[20;6~" }
  - { key: F10, mods: Alt, chars: "\e[21;6~" }
  - { key: F11, mods: Alt, chars: "\e[23;6~" }
  - { key: F12, mods: Alt, chars: "\e[24;6~" }
  - { key: F1, mods: Super, chars: "\e[1;3P" }
  - { key: F2, mods: Super, chars: "\e[1;3Q" }
  - { key: F3, mods: Super, chars: "\e[1;3R" }
  - { key: F4, mods: Super, chars: "\e[1;3S" }
  - { key: F5, mods: Super, chars: "\e[15;3~" }
  - { key: F6, mods: Super, chars: "\e[17;3~" }
  - { key: F7, mods: Super, chars: "\e[18;3~" }
  - { key: F8, mods: Super, chars: "\e[19;3~" }
  - { key: F9, mods: Super, chars: "\e[20;3~" }
  - { key: F10, mods: Super, chars: "\e[21;3~" }
  - { key: F11, mods: Super, chars: "\e[23;3~" }
  - { key: F12, mods: Super, chars: "\e[24;3~" }
  - { key: NumpadEnter, chars: "\n" }
